import axios from "axios";

const API_URL = "http://localhost:3000/api/auth";

// ‚úÖ Signup Function
export const signup = async (userData) => {
  try {
    console.log("üîπ Sending signup request with:", userData);

    const response = await axios.post(`${API_URL}/signup`, {
      name: userData.name, // ‚úÖ Ensure correct field name
      email: userData.email,
      password: userData.password,
    });

    console.log("‚úÖ Signup successful:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Signup error:", error.response?.data || error.message);
    throw new Error(error.response?.data?.message || "Signup failed");
  }
};

// ‚úÖ Login Function
export const login = async (credentials) => {
  try {
    console.log("üîπ Logging in with:", credentials);

    const response = await axios.post(`${API_URL}/login`, credentials);

    if (response.data.token) {
      localStorage.setItem("authToken", response.data.token);
    }

    console.log("‚úÖ Login successful:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Login error:", error.response?.data || error.message);
    throw new Error(error.response?.data?.message || "Login failed");
  }
};

// ‚úÖ Get User Data Function
export const getUser = async () => {
  try {
    const token = localStorage.getItem("authToken");

    if (!token) {
      console.warn("‚ùå No authentication token found. Logging out.");
      return null; // ‚úÖ Return null instead of throwing an error
    }

    console.log("üîπ Fetching user with token:", token);

    const response = await axios.get(`${API_URL}/me`, {
      headers: { Authorization: `Bearer ${token}` },
      withCredentials: true,
    });

    return response.data;
  } catch (error) {
    console.error("‚ùå Get user error:", error.response?.data || error.message);

    // ‚úÖ If token is invalid, clear storage and force logout
    if (error.response?.status === 401) {
      console.warn("‚ùå Token is invalid. Logging out.");
      localStorage.removeItem("authToken");
      return null;
    }

    throw new Error(
      error.response?.data?.message || "Failed to fetch user data"
    );
  }
};
